def consome(int codigo):
	if codigo == lista[0][0]:
		pop lista
	else 
		erro
		exit

def listaIdent():
	consome(codigo variavel)
	restoIdentList()

def type():
	cod = lista[0][0]
	if cod == dicionario_tokens['integer']:
		consome(dicionario_tokens['integer'])
	elif cod == dicionario_tokens['float']
		[...]
	else:
		erro(esperava x recebi y)
		exit

def declaration():
	listaIdent()
	consome(:)
	type()
	consome(;)

def restoDeclaration():

def declarations():
	consome(palavra reservada var)
	declaration()
	restoDeclaration()

def stmtList():
	if lista[0][0] in {set com os códigos das palavras iniciais dos statemets. ex: código do 'for', 'while', 'read', 'write'...}
		stmt()
		stmtList()
	//Não precisa de else o tratamento do & (vazio) é deixar passar direto

def sintatico(): ---------------------
	consome(codigo do program);
	consome(codigo variavel);
	consome(codigo ;)
	declarations()
	consome(begin)
	stmtList()
	consome(end)
	consome(.) //Aqui a lista deve estar vazia, conferir
	print("Análise sintática concluída!")