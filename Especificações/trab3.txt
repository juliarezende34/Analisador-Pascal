TP03 â€“ GeraÃ§Ã£o de CÃ³digo IntermediÃ¡rio e AnÃ¡lise SemÃ¢ntica

ğŸ”¹ GeraÃ§Ã£o de CÃ³digo IntermediÃ¡rio
 Garantir que, ao analisar um arquivo .pas, uma lista de tuplas que representa o cÃ³digo intermediÃ¡rio seja retornada corretamente.

 Implementar geraÃ§Ã£o de tuplas para:

 Entrada (read(var) â†’ ("CALL", "SCAN", var, tipo))

 SaÃ­da (write(expr) â†’ ("CALL", "PRINT", valor, None))

 Implementar geraÃ§Ã£o de labels:

 Criar um gerador automÃ¡tico de labels (LABEL1, LABEL2, ...).

 Criar gerador de variÃ¡veis temporÃ¡rias (_t1, _t2, ...).

ğŸ”¹ Controle de Fluxo
 if, while, for: Gerar as tuplas correspondentes com IF, JUMP e LABEL.

 Adicionar lÃ³gica para saltar corretamente entre trechos de cÃ³digo.

 Organizar as listas de tuplas com estrutura:

Labels de entrada e saÃ­da

AvaliaÃ§Ã£o da condiÃ§Ã£o

Corpo principal

Saltos (IF, JUMP) entre labels

ğŸ”¹ Regras EspecÃ­ficas
 Declarations:

 Implementar anÃ¡lise recursiva.

 Retornar tuplas de inicializaÃ§Ã£o com valor padrÃ£o (0, 0.0 ou "").

 ExpressÃµes (expr):

 Construir corretamente as listas de tuplas de operaÃ§Ãµes aritmÃ©ticas e lÃ³gicas.

 Garantir precedÃªncia usando variÃ¡veis temporÃ¡rias.

 VerificaÃ§Ã£o de sÃ­mbolo (semÃ¢ntica):

 Checar se variÃ¡veis usadas foram declaradas.

 LanÃ§ar erro semÃ¢ntico se nÃ£o foram.

